{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "SampleReduction.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyN4GFw4gmA4CkgY+W89bsNV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ElizaP23/EscapeEarth/blob/main/SampleReduction.ipynb/eliza\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8tq7yncVTbst",
        "outputId": "286f25df-a29c-45f5-e65b-a6e76b104c67"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q-XKWe2YTfD0",
        "outputId": "adb5039a-2f1a-4ba8-aa85-819791a5e910"
      },
      "source": [
        "## typical imports\n",
        "%matplotlib inline \n",
        "!pip install lightkurve==1.9.0 #b/c non-standard library and we want a specific one\n",
        "import lightkurve as lk\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from astroquery.mast import Catalogs"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting lightkurve==1.9.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9a/45/d5c5555a0bf3d505ac2912c514dfb1cf49c1e57a28cf6b3bffc7ebf4ed21/lightkurve-1.9.0-py3-none-any.whl (492kB)\n",
            "\u001b[K     |████████████████████████████████| 501kB 5.4MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (1.19.5)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (0.5.1)\n",
            "Requirement already satisfied: bs4 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (0.0.1)\n",
            "Collecting uncertainties\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/45/41/fc7e7b73b603e7c2c9e040b7aa8caf4a88d74b6faa567601ed82b6f0d8e1/uncertainties-3.1.5-py2.py3-none-any.whl (246kB)\n",
            "\u001b[K     |████████████████████████████████| 256kB 7.5MB/s \n",
            "\u001b[?25hCollecting astroquery>=0.3.9\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1b/f8/4690523783691ed816b3469c3ec611af3798594d37ade510dd918d59f57e/astroquery-0.4.1.tar.gz (6.5MB)\n",
            "\u001b[K     |████████████████████████████████| 6.5MB 6.7MB/s \n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (2.23.0)\n",
            "Requirement already satisfied: tqdm>=4.25.0 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (4.41.1)\n",
            "Collecting fbpca>=1.0\n",
            "  Downloading https://files.pythonhosted.org/packages/a7/a5/2085d0645a4bb4f0b606251b0b7466c61326e4a471d445c1c3761a2d07bc/fbpca-1.0.tar.gz\n",
            "Requirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (1.4.1)\n",
            "Collecting oktopus\n",
            "  Downloading https://files.pythonhosted.org/packages/2d/6e/7b7e11442ff70286c22614d200f6145f83528dc6c99fec0982665e25c8d3/oktopus-0.1.2.tar.gz\n",
            "Requirement already satisfied: astropy>=1.3 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (4.2.1)\n",
            "Requirement already satisfied: matplotlib>=1.5.3 in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (3.2.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from lightkurve==1.9.0) (1.1.5)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from patsy>=0.5.1->lightkurve==1.9.0) (1.15.0)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.7/dist-packages (from bs4->lightkurve==1.9.0) (4.6.3)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from uncertainties->lightkurve==1.9.0) (0.16.0)\n",
            "Collecting keyring>=4.0\n",
            "  Downloading https://files.pythonhosted.org/packages/26/f9/41230ac47f738f1ba66676dc8d3b30ca5b1f9eb0230fc204bcd9836c4ae9/keyring-23.0.1-py3-none-any.whl\n",
            "Requirement already satisfied: html5lib>=0.999 in /usr/local/lib/python3.7/dist-packages (from astroquery>=0.3.9->lightkurve==1.9.0) (1.0.1)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->lightkurve==1.9.0) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->lightkurve==1.9.0) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->lightkurve==1.9.0) (2020.12.5)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->lightkurve==1.9.0) (1.24.3)\n",
            "Requirement already satisfied: autograd in /usr/local/lib/python3.7/dist-packages (from oktopus->lightkurve==1.9.0) (1.3)\n",
            "Requirement already satisfied: pyerfa in /usr/local/lib/python3.7/dist-packages (from astropy>=1.3->lightkurve==1.9.0) (1.7.2)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.3->lightkurve==1.9.0) (2.4.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.3->lightkurve==1.9.0) (1.3.1)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.3->lightkurve==1.9.0) (2.8.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.3->lightkurve==1.9.0) (0.10.0)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->lightkurve==1.9.0) (2018.9)\n",
            "Collecting jeepney>=0.4.2; sys_platform == \"linux\"\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/51/b0/a6ea72741aaac3f37fb96d195e4ee576a103c4c04e279bc6b446a70960e1/jeepney-0.6.0-py3-none-any.whl (45kB)\n",
            "\u001b[K     |████████████████████████████████| 51kB 5.0MB/s \n",
            "\u001b[?25hCollecting SecretStorage>=3.2; sys_platform == \"linux\"\n",
            "  Downloading https://files.pythonhosted.org/packages/d9/1e/29cd69fdac7391aa51510dfd42aa70b4e6a826c8cd019ee2a8ab9ec0777f/SecretStorage-3.3.1-py3-none-any.whl\n",
            "Requirement already satisfied: importlib-metadata>=3.6 in /usr/local/lib/python3.7/dist-packages (from keyring>=4.0->astroquery>=0.3.9->lightkurve==1.9.0) (3.10.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.7/dist-packages (from html5lib>=0.999->astroquery>=0.3.9->lightkurve==1.9.0) (0.5.1)\n",
            "Collecting cryptography>=2.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b2/26/7af637e6a7e87258b963f1731c5982fb31cd507f0d90d91836e446955d02/cryptography-3.4.7-cp36-abi3-manylinux2014_x86_64.whl (3.2MB)\n",
            "\u001b[K     |████████████████████████████████| 3.2MB 46.5MB/s \n",
            "\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=3.6->keyring>=4.0->astroquery>=0.3.9->lightkurve==1.9.0) (3.4.1)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=3.6->keyring>=4.0->astroquery>=0.3.9->lightkurve==1.9.0) (3.7.4.3)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.7/dist-packages (from cryptography>=2.0->SecretStorage>=3.2; sys_platform == \"linux\"->keyring>=4.0->astroquery>=0.3.9->lightkurve==1.9.0) (1.14.5)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.7/dist-packages (from cffi>=1.12->cryptography>=2.0->SecretStorage>=3.2; sys_platform == \"linux\"->keyring>=4.0->astroquery>=0.3.9->lightkurve==1.9.0) (2.20)\n",
            "Building wheels for collected packages: astroquery, fbpca, oktopus\n",
            "  Building wheel for astroquery (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for astroquery: filename=astroquery-0.4.1-cp37-none-any.whl size=3831874 sha256=0fffe73005cb9de8cda2497d4d3b9541e92704f8ae74d578b85299a8e282d2c5\n",
            "  Stored in directory: /root/.cache/pip/wheels/88/f8/b7/a254cd96e808f708bc0b7d755a8e095c56fbbe94099d7b464f\n",
            "  Building wheel for fbpca (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for fbpca: filename=fbpca-1.0-cp37-none-any.whl size=11376 sha256=1acfb5268d8e6afec6e06b08bb38a4ad463e5222fe1e41c9a4bfed9680c9e6f7\n",
            "  Stored in directory: /root/.cache/pip/wheels/53/a2/dd/9b66cf53dbc58cec1e613d216689e5fa946d3e7805c30f60dc\n",
            "  Building wheel for oktopus (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for oktopus: filename=oktopus-0.1.2-cp37-none-any.whl size=12780 sha256=7c7820a3d9a63177cca0a114a22819305536e930c3a6dca96dc8cefe9ff85aa4\n",
            "  Stored in directory: /root/.cache/pip/wheels/9b/90/81/098fc66ee56166d63c9a8fc0a9672ae7b3423396a588ec952a\n",
            "Successfully built astroquery fbpca oktopus\n",
            "Installing collected packages: uncertainties, jeepney, cryptography, SecretStorage, keyring, astroquery, fbpca, oktopus, lightkurve\n",
            "Successfully installed SecretStorage-3.3.1 astroquery-0.4.1 cryptography-3.4.7 fbpca-1.0 jeepney-0.6.0 keyring-23.0.1 lightkurve-1.9.0 oktopus-0.1.2 uncertainties-3.1.5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wpi-ZdrYSakn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "65593787-2053-43b0-ed8f-7b3ccea38755"
      },
      "source": [
        "candidates=pd.read_csv('/content/gdrive/My Drive/EscapeEarthData/exoplanet_candidates.csv')\n",
        "candidates"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TIC</th>\n",
              "      <th>Sector</th>\n",
              "      <th>author</th>\n",
              "      <th>ExoFOPclass</th>\n",
              "      <th>notes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>233120979</td>\n",
              "      <td>14</td>\n",
              "      <td>danielle</td>\n",
              "      <td>PC</td>\n",
              "      <td>wrong orbital period but definitely transits i...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28230919</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>seems to line up</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>99813351</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>wrong orbital period, possibly a transit</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>26656583</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>99920728</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124</th>\n",
              "      <td>396779850</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>No information regarding the dispositions and ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>125</th>\n",
              "      <td>406951407</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>No information regarding the dispositions and ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>126</th>\n",
              "      <td>408474216</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>No information regarding the dispositions and ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>127</th>\n",
              "      <td>416195870</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>PC</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>441734144</td>\n",
              "      <td>14</td>\n",
              "      <td>olivia</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>No information regarding the dispositions and ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>129 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           TIC  ...                                              notes\n",
              "0    233120979  ...  wrong orbital period but definitely transits i...\n",
              "1     28230919  ...                                  seems to line up \n",
              "2     99813351  ...           wrong orbital period, possibly a transit\n",
              "3     26656583  ...                                                NaN\n",
              "4     99920728  ...                                                NaN\n",
              "..         ...  ...                                                ...\n",
              "124  396779850  ...  No information regarding the dispositions and ...\n",
              "125  406951407  ...  No information regarding the dispositions and ...\n",
              "126  408474216  ...  No information regarding the dispositions and ...\n",
              "127  416195870  ...                                                NaN\n",
              "128  441734144  ...  No information regarding the dispositions and ...\n",
              "\n",
              "[129 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7_IStxAITscm",
        "outputId": "621aa1af-909c-40d1-9228-416f21c5a650"
      },
      "source": [
        "falsep_list = []\n",
        "unknown_list = []\n",
        "planets_list = []\n",
        "for idx, i in enumerate(candidates['ExoFOPclass'].to_numpy()):\n",
        "  if i == 'PC':\n",
        "    planets_list.append(idx)\n",
        "  elif (i[0] == 'U') | (i[0] == 'u'): \n",
        "    unknown_list.append(idx)\n",
        "  elif i == 'FP':\n",
        "    falsep_list.append(idx)\n",
        "  else:\n",
        "    print('Something went wrong', idx, i)\n",
        "all_lists = [falsep_list, unknown_list, planets_list]\n",
        "for i in all_lists:\n",
        "  print(len(i)) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "18\n",
            "105\n",
            "6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i14Zrp5eV6Wb",
        "outputId": "0c596f73-8ef1-41a4-ab25-458c5a4a1f62"
      },
      "source": [
        "#apply index masks to isolate the type of transits \n",
        "falsep=candidates.iloc[falsep_list]\n",
        "unknown=candidates.iloc[unknown_list]\n",
        "planets=candidates.iloc[planets_list]\n",
        "print(len(falsep), len(unknown), len(planets))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "18 105 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "7qBwerEASEnt",
        "outputId": "5279e727-8493-46ed-f038-9af062c0e0b0"
      },
      "source": [
        "#open stats data\n",
        "main_df = pd.read_csv('/content/gdrive/My Drive/EscapeEarthData/main_df.csv')\n",
        "main_df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TIC</th>\n",
              "      <th>Period</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Transit Time</th>\n",
              "      <th>Power</th>\n",
              "      <th>Depth</th>\n",
              "      <th>Sector</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7582633</td>\n",
              "      <td>0.299916</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.157</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000398</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7582634</td>\n",
              "      <td>0.299916</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.161</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000534</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7583285</td>\n",
              "      <td>0.301269</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.162</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000406</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7584971</td>\n",
              "      <td>0.301269</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.157</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000111</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7585322</td>\n",
              "      <td>0.299916</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.154</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000102</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32030</th>\n",
              "      <td>2002418280</td>\n",
              "      <td>0.299916</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.155</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000474</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32031</th>\n",
              "      <td>2002418281</td>\n",
              "      <td>0.299916</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.159</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000462</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32032</th>\n",
              "      <td>2002486147</td>\n",
              "      <td>0.301269</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.161</td>\n",
              "      <td>1</td>\n",
              "      <td>0.000159</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32033</th>\n",
              "      <td>2003139541</td>\n",
              "      <td>0.299916</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.158</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000235</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32034</th>\n",
              "      <td>2005005557</td>\n",
              "      <td>0.306743</td>\n",
              "      <td>0.298</td>\n",
              "      <td>0.164</td>\n",
              "      <td>5</td>\n",
              "      <td>0.000319</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>32035 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "              TIC    Period  Duration  Transit Time  Power     Depth  Sector\n",
              "0         7582633  0.299916     0.298         0.157      0  0.000398      14\n",
              "1         7582634  0.299916     0.298         0.161      0  0.000534      14\n",
              "2         7583285  0.301269     0.298         0.162      1  0.000406      14\n",
              "3         7584971  0.301269     0.298         0.157      1  0.000111      14\n",
              "4         7585322  0.299916     0.298         0.154      0  0.000102      14\n",
              "...           ...       ...       ...           ...    ...       ...     ...\n",
              "32030  2002418280  0.299916     0.298         0.155      0  0.000474      15\n",
              "32031  2002418281  0.299916     0.298         0.159      0  0.000462      15\n",
              "32032  2002486147  0.301269     0.298         0.161      1  0.000159      15\n",
              "32033  2003139541  0.299916     0.298         0.158      0  0.000235      15\n",
              "32034  2005005557  0.306743     0.298         0.164      5  0.000319      15\n",
              "\n",
              "[32035 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O0QQlTpVSWvQ",
        "outputId": "ff114a5e-5879-489c-89b3-4cf4b1d659d7"
      },
      "source": [
        "#merge each transit with stats data to get those stats\n",
        "falsep_list= main_df[np.isin(main_df['TIC'],falsep['TIC'])]\n",
        "planet_list=main_df[np.isin(main_df['TIC'],planets['TIC'])]\n",
        "unknown_list=main_df[np.isin(main_df['TIC'],unknown['TIC'])]\n",
        "print(len(falsep_list), len(unknown_list), len(planets_list))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "27 139 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 893
        },
        "id": "k-1OexRsUdEQ",
        "outputId": "66174124-00f7-4c49-fea5-3f698418d4ff"
      },
      "source": [
        "%matplotlib inline\n",
        "fig,ax= plt.subplots(4,2,figsize=(18,12))\n",
        "for i,col in enumerate(main_df.columns):\n",
        "  N =[15,15,5,15,5,30,25,15]\n",
        "  if min(main_df[col].to_numpy()) == 0:\n",
        "    bins=np.logspace(np.log10(min(main_df[col].to_numpy())+0.005),np.log10(max(main_df[col].to_numpy())), N[i])\n",
        "  else:\n",
        "    bins=np.logspace(np.log10(min(main_df[col].to_numpy())),np.log10(max(main_df[col].to_numpy())), N[i])\n",
        "  if i<4:\n",
        "    ax[i,0].hist(main_df[col],bins,label = 'full data')\n",
        "    ax[i,0].hist(falsep_list[col],bins,label='false pos')\n",
        "    ax[i,0].hist(planet_list[col],bins,label = 'planets')\n",
        "    ax[i,0].hist(unknown_list[col],bins, label='unknown')\n",
        "    ax[i,0].set_title(col,fontsize=25)\n",
        "    ax[i,0].legend()\n",
        "  else:\n",
        "   ax[i-4,1].hist(main_df[col],bins,label='full data')\n",
        "   ax[i-4,1].hist(falsep_list[col],bins, label= 'false pos')\n",
        "   ax[i-4,1].hist(planet_list[col],bins, label='planets')\n",
        "   ax[i-4,1].hist(unknown_list[col],bins, label = 'unknown')\n",
        "   ax[i-4,1].set_title(col,fontsize=25)\n",
        "   ax[i-4,1].legend()\n",
        "  plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x864 with 8 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XsRxkMsebE6U"
      },
      "source": [
        "#apply promising thresholds to see reduced sample size\n",
        "#power < 50\n",
        "#duration < 0.125\n",
        "reduced_df=main_df['Power']<50"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dyZgXw25Ltq4"
      },
      "source": [
        "#convert parallax from milliarcsecs to arcsecs\n",
        "converted = []\n",
        "distance = []\n",
        "m = catalog_data[\"GAIAmag\"]\n",
        "for i,j in zip(catalog_data[\"plx\"], m) :\n",
        "  num = i/1000\n",
        "  converted.append(num)\n",
        "#convert parallax (now in arcsec) to distance\n",
        "  d = 1/num\n",
        "  distance.append(d)\n",
        "#use distance and m (apparent mag) in the distance modulus to get M (absolute mag)\n",
        "#m - M = 5 log(d) - 5\n",
        "  M = j + 5 - 5*(np.log10(d))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FTowalglOyAP"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}